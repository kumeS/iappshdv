# iappshdv 開発方針

## Homebrew タップ配布について

### 目標
- iappshdv を Homebrew タップとして配布し、インストールを簡素化する
- `brew install username/tap/iappshdv` でインストールできるようにする

### 実装手順
1. **リポジトリ準備**
   - GitHub リポジトリを `homebrew-tap` として作成
   - 必要なディレクトリ構造を設定

2. **Formula ファイル作成**
   - Ruby で Formula ファイルを作成（`iappshdv.rb`）
   - バージョン管理の仕組みを実装
   - 依存関係を明示（xcode-build, cocoapods など）

3. **インストール後のセットアップ**
   - 必要なツールの自動インストール処理
   - 設定ファイルの配置
   - パーミッション設定

## コマンド集約について

### 目標
- 複数の sh スクリプトを単一の `iappshdv` コマンドに集約
- サブコマンド形式で機能を提供（例: `iappshdv verify`, `iappshdv setup`）

### 実装方針
1. **コマンド構造**
   ```
   iappshdv
   ├── setup         # 環境セットアップ
   │   ├── prereqs   # 前提条件インストール
   │   └── env       # Mac環境準備
   ├── verify        # 検証コマンド
   │   ├── code      # コード品質検証
   │   ├── security  # セキュリティチェック
   │   ├── size      # IPAサイズ検証
   │   └── all       # すべての検証を実行
   └── build         # ビルド検証
   ```

2. **メイン実行ファイル**
   - `bin/iappshdv` として実装
   - 引数解析と適切なスクリプトへのディスパッチ機能

3. **スクリプト変換**
   - 既存のシェルスクリプトをライブラリ関数として再構成
   - 共通機能を `lib/` ディレクトリに分割
   - 各機能モジュールを個別に呼び出し可能に変更

4. **設定管理**
   - `~/.iappshdv/config` に設定ファイルを格納
   - プロジェクトごとの設定をサポート（`.iappshdv` ファイル）

5. **エラーハンドリング**
   - 統一されたエラーコードシステム
   - 詳細ログ出力とサイレントモードのサポート

## リファクタリング計画

1. **ディレクトリ構造の再編成**
   ```
   iappshdv/
   ├── bin/
   │   └── iappshdv       # メインコマンド
   ├── lib/
   │   ├── common.sh      # 共通関数
   │   ├── setup.sh       # セットアップ関連
   │   ├── verify.sh      # 検証関連
   │   └── build.sh       # ビルド関連
   ├── completions/       # コマンド補完
   └── man/               # マニュアルページ
   ```

2. **機能別モジュール化**
   - 各スクリプトの機能を分離し、再利用可能な関数として実装
   - 依存関係を明確にし、循環参照を避ける

3. **テスト環境の構築**
   - 各モジュールの単体テスト
   - 統合テストによる動作検証

## リリース計画

1. **v0.1.0**: 基本構造の実装とコマンド集約
2. **v0.2.0**: Homebrew タップのサポート
3. **v0.3.0**: 追加機能と安定化
4. **v1.0.0**: 正式リリース

## 注意点

- macOS 特有の環境への依存関係を明確にする
- バージョン管理とアップデート通知の仕組みを組み込む
- 実行速度の最適化（特に大規模プロジェクトでの検証時間）
- セキュリティ考慮事項（スクリプト実行権限、API キーの管理など） 